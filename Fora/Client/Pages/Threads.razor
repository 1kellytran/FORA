@page "/threads/{Id:int}"
@inject IDataManager DataManager
@inject IUserManager UserManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<EditForm Model="Search" OnSubmit="SearchThread">
        <InputText @bind-Value="Search.SearchWord" placeholder="Search"></InputText>
        <button class="btn btn-light">Search</button>
</EditForm>
<br />
<br />
@if (showThreadInfo)
{
    <h3>What are you curious about?</h3> <br/> 
    @foreach(var thread in AllThreads)
    {
        <div>
            <a href="/Message">@thread.Name</a><br />
        
            @if (thread.Messages != null)
            {
                <em>@thread.Messages.Count messages</em>
            }

        </div>    
    }

}
<buton class="btn btn-light" @onclick="DisplayThreadInfo">@threadButtonName</buton> <button class="btn btn-light" @onclick="SortThreads">Sort Threads</button>
<br />
<br />

<h5>Can't find what you're looking for? Create one here!</h5>
<EditForm Model="ThreadToAdd" OnSubmit="CreateThread">
        <label>New thread:</label>
        <InputText @bind-Value="ThreadToAdd.Name" placeholder="Thread name"></InputText>
        <button class="btn btn-light">Create thread!</button>
</EditForm>





@code {
    [Parameter]
    public int Id { get; set; }
    public SearchModel Search { get; set; } = new();
    public List<ThreadModel> SearchList { get; set; } = new();
    public List<ThreadModel> AllThreads { get; set; } = new();
    public ThreadModel ThreadToAdd { get; set; } = new();
    public UserModel ActiveUser { get; set; } = new();
    public UserStatusDTOModel UserStatus { get; set; } = new();
    public List<InterestModel> AllInterests = new(); //för att hämta all interests
    InterestModel ActiveInterest = new();
    private string threadButtonName = "Hide";
    private bool showThreadInfo = true;

    protected override async Task OnInitializedAsync()
    {    
        //*****CHECK USER LOGIN (att användas på alla sidor)
        //Hämtar token från localstorage
        var token = await localStorage.GetItemAsync<string>("Token");
        token = token.Replace("\"", "");
        //kollar att user finns i databas med token
        var result = await UserManager.CheckUserLogin(token);
        UserStatus = result;
        //hämtar den aktiva användaren
        ActiveUser = await UserManager.GetUserByToken(token);

        AllThreads = await DataManager.GetAllThreads(Id);
    }

    private async void CreateThread()
    {
        //lägger till user till thread
        ThreadToAdd.User = ActiveUser;
        //hämta alla interests
        AllInterests = await DataManager.GetAllInterests();
        ActiveInterest = AllInterests.FirstOrDefault(I => I.Id == Id);

        ThreadToAdd.Interest = ActiveInterest; // måste vara ett interest som finns? annars läggs det dubbel i db :(
        await DataManager.CreateThread(ThreadToAdd);
        AllThreads = await DataManager.GetAllThreads(Id);
        StateHasChanged();

        // Get user interests
        // _context.Interests.Where(i => i.UserInterests.Any(ui => ui.UserId == user.Id)).ToList();
    }

    private void SortThreads()
    {
        AllThreads = AllThreads.OrderBy(o=>o.Name).ToList();
    }

    private void SearchThread()
    {
        SearchList = AllThreads.Where(t => t.Name.Contains(Search.SearchWord)).ToList();
        AllThreads = SearchList;
        StateHasChanged();
    }

    private async Task DisplayThreadInfo()
    {
        if(!showThreadInfo)
        {
            showThreadInfo = true;
            threadButtonName = "Hide";
            AllThreads = await DataManager.GetAllThreads(Id);

        }
        else if(showThreadInfo)
        {
            showThreadInfo = false;
            threadButtonName = "Show threads";
        }

    }
}



