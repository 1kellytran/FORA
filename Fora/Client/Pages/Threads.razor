@page "/threads/{Id:int}"
@inject IDataManager DataManager
@inject IUserManager UserManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<EditForm Model="Search" OnSubmit="SearchThread">
    <InputText @bind-Value="Search.SearchWord" placeholder="Search"></InputText>
    <button class="btn btn-light">Search</button>
</EditForm>

<br />
<br />
@if (showThreadInfo)
{
    <h3>What are you curious about?</h3>
        @foreach(var thread in AllThreads)
        {
            <div>
            <h3><a href="/Messages/@thread.Id">@thread.Name</a></h3>@if (thread.UserId == ActiveUser.Id){<Button class="btn btn-danger">Delete thread</Button>}
            
            

            @if (thread.Messages != null)
                {
                    <em>@thread.Messages.Count messages</em>
                }

            </div>    
        }
<br />
}
<button class="btn btn-light" @onclick="DisplayThreadInfo">@threadButtonName</button> <button class="btn btn-light" @onclick="SortThreads">Sort</button>
<br />
<hr />


<h5>Can't find what you're looking for? Create a thread here!</h5>
<EditForm Model="ThreadToAdd" OnSubmit="CreateThread">
        <label>New thread:</label>
        <InputText @bind-Value="ThreadToAdd.Name" placeholder="Thread name"></InputText>
        <button>Create thread!</button>
</EditForm>



@code {
    [Parameter]
    public int Id { get; set; }
    public SearchModel Search { get; set; } = new();
    public List<ThreadModel> SearchList { get; set; } = new();
    public List<ThreadModel> AllThreads { get; set; } = new();
    public ThreadModel ThreadToAdd { get; set; } = new();
    public UserModel ActiveUser { get; set; } = new();
    public UserStatusDTOModel UserStatus { get; set; } = new();
    public List<InterestModel> AllInterests = new(); //för att hämta all interests
    InterestModel ActiveInterest = new();
    private string threadButtonName = "Hide";
    private bool showThreadInfo = true;

    protected override async Task OnInitializedAsync()
    {    
        //*****CHECK USER LOGIN (att användas på alla sidor)
        //Hämtar token från localstorage
        var token = await localStorage.GetItemAsync<string>("Token");
        token = token.Replace("\"", "");
        //kollar att user finns i databas med token
        var result = await UserManager.CheckUserLogin(token);
        UserStatus = result;
        //hämtar den aktiva användaren
        ActiveUser = await UserManager.GetUserByToken(token);

        AllThreads = await DataManager.GetAllThreads(Id);
    }

    private async void CreateThread()
    {
        //lägger till user till thread
        ThreadToAdd.User = ActiveUser;
        //hämta alla interests
        AllInterests = await DataManager.GetAllInterests();
        ActiveInterest = AllInterests.FirstOrDefault(I => I.Id == Id);

        ThreadToAdd.Interest = ActiveInterest;
        await DataManager.CreateThread(ThreadToAdd);
        AllThreads = await DataManager.GetAllThreads(Id);
        StateHasChanged();

        // Get user interests
        // _context.Interests.Where(i => i.UserInterests.Any(ui => ui.UserId == user.Id)).ToList();


    }

    private void SortThreads()
    {
        AllThreads = AllThreads.OrderBy(o => o.Name).ToList(); 
    }

    private void SearchThread()
    {
        SearchList = AllThreads.Where(t => t.Name.ToLower().Contains(Search.SearchWord.ToLower())).ToList();
        AllThreads = SearchList;
        StateHasChanged();
    }

    private async Task DisplayThreadInfo()
    {
        if (!showThreadInfo)
        {
            showThreadInfo = true;
            threadButtonName = "Hide";
            AllThreads = await DataManager.GetAllThreads(Id);
        }
        else if (showThreadInfo)
        {
            showThreadInfo = false;
            threadButtonName = "Show threads";
        }
    }
}



