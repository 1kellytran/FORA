@page "/mypage"
@inject IUserManager UserManager
@inject IDataManager Datamanager
@inject NavigationManager navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="form-control">
    <a class="btn btn-group" href="/MyPage"><b>My Page</b></a>
    <a class="btn btn-group" href="/AllInterests"><b>All Interests</b></a>
    <a class="btn btn-group" href="/SignOut"><b>Sign Out</b></a>
</div>
<br />

<h1>Welcome to your page, @ActiveUser.Username!</h1>
<br />
<br />
<h3>Your Current interest:</h3>

<form>
    @foreach (var interest in UserInterests)
    {
        <div class="card bg-primary p-2 text-dark bg-opacity-10">
            <div class="card-body">
                <strong>@interest.Name </strong><a type="button" href="Threads/@interest.Id" class="btn btn-light" style="float: right">Go to threads!</a>
                <button type="button" @onclick="(() =>RemoveFromFav(interest.Id))" class="btn btn-outline-success" style="float: right">Remove from fav</button>
                
                @if (interest.UserId == null)
                {
                    <a style="float:right">Thread created by a deleted user</a>
                }
                @if (interest.Threads != null)
                {
                    <p>@interest.Threads.Count threads </p>
                }                
            </div>
        </div>
        <br />
    }
</form>

<hr />

<form>

    <button type="button" class="btn btn-outline-primary" @onclick="ShowAllInterests">Show all interests</button>
    <br />
    <br />

    @if (displayAllInterests)
    {
        <div>
            @foreach (var interest in AllInterests)
            {
                <div class="card bg-primary p-2 text-dark bg-opacity-10">
                    <div class="card-body">
                        <strong>@interest.Name </strong>
                        <a type="button" href="Threads/@interest.Id" class="btn btn-light" style="float: right">Go to threads!</a>
                        <button type="button" @onclick="(() =>AddToFav(interest.Id))" class="btn btn-outline-success" style="float: right">Add to fav!</button>
                        @if (interest.UserId == ActiveUser.Id)
                        {

                            <button @onclick="(()=>DeleteFromInterest(interest.Id))" class="btn btn-outline-danger" type="button" style="float: right">Delete interest </button>
                        }
                        @if (interest.UserId == null)
                        {
                            <a style="float:right">Thread created by a deleted user</a>
                        }
                        @if (interest.Threads != null)
                        {
                            <p>@interest.Threads.Count threads </p>
                        }

                    </div>
                </div>
                <br />
            }
            <button type="button" class="btn btn-outline-secondary" @onclick="HideAllInterests">Hide interests</button>
            <br />
        </div>
    }

</form>

<br />
<hr />

<EditForm Model="InterestToAdd" OnValidSubmit="AddPersonalInterest">
    <DataAnnotationsValidator />
    <div>
        <label><strong>Create an interest you want to discuss:</strong></label>
        <InputText @bind-Value="InterestToAdd.Name" placeholder="Interest" class="form-control"></InputText>
    </div>
    <br />
    <div>
        <button class="btn btn-outline-primary" type="submit">Create interest!</button>
    </div>
    <ValidationSummary />
</EditForm>
<br />
<br />
<hr />
<ChangePassword></ChangePassword>
<hr>
<form>
    <div>
        <button class="btn btn-danger" type="button">Inactivate user</button>
        <button @onclick="(()=>DeleteUser(ActiveUser.Id))" class="btn btn-danger" type="button">Remove user</button>
    </div>
</form>
<hr />
@if (UserStatus.IsLoggedIn)
{
    <h3>You only see this because you are logged in</h3>
}

@if (UserStatus.IsAdmin)
{
    <h3>You only see this because you are an admin</h3>
}

@code {
    private bool SignedIn;

    //Sets new userinterest
    public InterestModel InterestToAdd { get; set; } = new();
    public UserStatusDTOModel UserStatus { get; set; } = new();
    public UserModel ActiveUser { get; set; } = new();
    public List<InterestModel> AllInterests { get; set; } = new();
    public List<UserInterestModel> ActiveUserInterest { get; set; } = new();
    public List<InterestModel> UserInterests { get; set; } = new();
    public bool displayAllInterests = false;

    protected override async Task OnInitializedAsync()
    {
        //*****CHECK USER LOGIN (att användas på alla sidor)
        //Hämtar token från localstorage
        var token = await localStorage.GetItemAsync<string>("Token");
        token = token.Replace("\"", "");
        //kollar att user finns i databas med token
        var result = await UserManager.CheckUserLogin(token);
        UserStatus = result;

        //hämtar den aktiva användaren
        ActiveUser = await UserManager.GetUserByToken(token);
        //hämtar alla intressen
        AllInterests = await Datamanager.GetAllInterests();

        UserInterests = await Datamanager.GetUserInterests(ActiveUser.Id);
    }

    public async Task AddToFav(int interestid)
    {
        UserInterestModel modelToAdd = new();
        modelToAdd.Interest = AllInterests.FirstOrDefault(x => x.Id == interestid);
        modelToAdd.User = ActiveUser;

        await Datamanager.CreateNewUserInterest(modelToAdd);

        UserInterests = await Datamanager.GetUserInterests(ActiveUser.Id);
    }

    public async Task RemoveFromFav(int interestId)
    {
        var userId = ActiveUser.Id;
        await Datamanager.RemoveInterestFromFav(interestId, userId);
        UserInterests = await Datamanager.GetUserInterests(ActiveUser.Id);
    }

    public async Task DeleteFromInterest(int interestId)
    {
        await Datamanager.DeleteFromInterest(interestId);
        AllInterests = await Datamanager.GetAllInterests();
        UserInterests = await Datamanager.GetUserInterests(ActiveUser.Id);
    }

    public async Task DeleteUser(int activeUser)
    {
        var token = await localStorage.GetItemAsync<string>("Token");
        UserManager.DeleteUser(activeUser, token);
        navigation.NavigateTo("");
    }

    private async Task AddPersonalInterest()
    {
        InterestToAdd.Threads = new();
        //adding user id to interestmodel
        InterestToAdd.UserId = ActiveUser.Id;
        //creating intesrest in db
        await Datamanager.CreateInterest(InterestToAdd);
        AllInterests = await Datamanager.GetAllInterests();
        UserInterests = await Datamanager.GetUserInterests(ActiveUser.Id);
        InterestToAdd = new();

        ////adding created interest to usermodel, is this neccessary? :/
        //ActiveUser.Interests.Add(InterestToAdd);
        //await UserManager.UpdateUserModel(ActiveUser);
    }

    //Allinterest button
    private void ShowAllInterests()
    {
        displayAllInterests = true;
    }

    //Hide all interests
    private void HideAllInterests()
    {
        displayAllInterests = false;
    }
}