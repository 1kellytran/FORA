@page "/mypage"
@inject IUserManager UserManager
@inject IDataManager Datamanager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h1>My Page</h1>
<hr />


<form>

    <div>
        <label>My current interest:</label>
        <br />
       @* @foreach (var interest in UserInterest)
        {
            <p>interest <button>Remove</button></p>
            
            <br>
        }*@
    </div>

    <hr />

    <div>
        <label>Add interest from existing interest:</label>
        <br />

        @foreach (var interest in AllInterests)
        {

                <div class="card">
                    <div class="card-body">
                       <strong><h4>@interest.Name </h4></strong><button class="btn btn-light" style="float: right">Add!</button>
                    </div>
                </div>
                
        }
    </div>

    <hr />
    @*<form method="post">
    <label>Create new interests:</label>
    <Input type="text" style="width:350px" placeholder="Enter interest">
    </form>
        <hr />*@

        <EditForm Model="InterestToAdd" OnValidSubmit="AddPersonalInterest">
    <DataAnnotationsValidator/>
    <div>
        <label>Username:</label>
        <InputText @bind-Value="InterestToAdd.Name" placeholder="Interest" class="form-control"></InputText>
    </div>
   <br />
   <br />
    <div>
        <button class="btn btn-primary" type="submit" >Create interest!</button>
     </div>

    <ValidationSummary/>
</EditForm>

@*<ChangePassword></ChangePassword>*@

</form>


@if (@UserStatus.IsLoggedIn)
{
    <h3>You only see this because you are logged in</h3>

    @if (@UserStatus.IsAdmin)
    {
        <h3>You only see this because you are an admin</h3>
    }

}

<h1>You have to log in to see this page</h1>

@code {
    //Sets new userinterest
    public InterestModel InterestToAdd { get; set; } = new();
    public UserStatusDTOModel UserStatus { get; set; } = new();
    public UserModel ActiveUser { get; set; } = new();
    public List<InterestModel> AllInterests { get; set;} = new();

    protected override async Task OnInitializedAsync()
    {

        //*****CHECK USER LOGIN (att användas på alla sidor)
        //Hämtar token från localstorage
        var token = await localStorage.GetItemAsync<string>("Token");
        token = token.Replace("\"", "");
        //kollar att user finns i databas med token
        var result = await UserManager.CheckUserLogin(token);
        UserStatus = result;
        //hämtar den aktiva användaren
        ActiveUser = await UserManager.GetUserByToken(token);
        //hämtar alla intressen
        AllInterests = await Datamanager.GetAllInterests();
    }

    private async Task AddPersonalInterest()
    {

        InterestToAdd.Threads = new();
        //adding user id to interestmodel
        InterestToAdd.UserId = ActiveUser.Id;
        await Datamanager.CreateInterest(InterestToAdd);
         
        //adding created interest to usermodel
        //await UserManager.UpdateUserModel(ActiveUser);

    }
    //Gets and sets the current userinterest
    public List<UserInterestModel> UserInterest { get; set; }

    private async Task GetCurrentUserList()
    {
        

    }

        // Hämta token 
        // Skicka token till API:t
        // API: Jämför token med tokens i databasen
        // API: Skickar tillbaka en UserStatusDto med (om token fanns - IsLoggedIn = true / om token inte fanna - IsLoggedIn = false)
        // Använd denna UserStatusDto på varje sida och rendera delar med if(userStatus.IsLoggedIn) if(userStatus.isAdmin)
}




