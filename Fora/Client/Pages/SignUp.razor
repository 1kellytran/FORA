@page "/signup"
@inject IUserManager UserManager
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject NavigationManager NavigationManager

<h3>Sign Up</h3>

<EditForm Model="UserToAdd" OnValidSubmit="SignUpUser">
    <DataAnnotationsValidator/>
    <div>
        <label>Username:</label>
        <InputText @bind-Value="UserToAdd.Username" placeholder="Username" class="form-control"></InputText>
    </div>
     <div>
        <label>Password:</label>
        <InputText type="password" @bind-Value="UserToAdd.Password" placeholder="Password" class="form-control"></InputText>
    </div>
    <div>
        <label>Verify password:</label>
        <InputText type="password" @bind-Value="UserToAdd.VerifiedPassword" placeholder="Verify Password" class="form-control"></InputText>
     </div>
     <br />
     <div>
        <button type="submit" >Sign Up</button>
     </div>
    <ValidationSummary/>
</EditForm>


@code{
    public UserDTOModel UserToAdd { get; set; } = new();

    private async Task SignUpUser()
    {
        var token = await UserManager.SignUpUser(UserToAdd);

        // Add token to the local storage (blazore)
        UpdateLocalStorage(token);

        if(token != "Could not create user")
        {
            NavigationManager.NavigateTo("/Welcome");
        }
    }

    public async void UpdateLocalStorage(string tokenToAdd)
    {
        await localStore.SetItemAsync("Token", tokenToAdd);
    }

    //public async void ClearLocalStorage()

    //{
    //    noteContent = "";
    //    await localStore.ClearAsync();
    //}                                                             ///Ska läggas till vid utloggning





}
