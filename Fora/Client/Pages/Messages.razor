@page "/Messages"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IUserManager UserManager
@inject IDataManager DataManager

<h3>Read what others feel about the subject!</h3>
@foreach (var mess in AllMessages)
{
    <div class="card-body">
        <p>@mess.Message</p>
    </div>
}
<br />

<EditForm Model="MessageToAdd" OnSubmit="CreateMessage">
        <label>Have something to say about the subject? Let us hear!</label><br />
        <InputText @bind-Value="MessageToAdd.Message" placeholder="Write something..."></InputText>
        <button class="btn btn-outline-success">Post message</button>
</EditForm>

@code {
    //public List<MessageModel> AllMessages { get; set; } = new List<MessageModel>
    //{
    //    new MessageModel{ Id =1, Message = "Jag tycker allt är bra"},
    //};

    public List<MessageModel> AllMessages { get; set; } = new();
    // För att hämta alla threads/kolla threadID?
    public List<ThreadModel> AllThreads { get; set; } = new();
    // För att hämta alla intressen/kolla interestID?
    public List<InterestModel> AllInterests { get; set; } = new();

    public MessageModel MessageToAdd { get; set; } = new();
    public UserStatusDTOModel UserStatus { get; set; } = new();
    public UserModel ActiveUser { get; set; } = new();
    InterestModel ActiveInterest = new();
    ThreadModel ActiveThread = new();
    public int InterestId = 5;
    public int ThreadId = 1;    

    protected override async Task OnInitializedAsync()
    {
        //*****CHECK USER LOGIN (att användas på alla sidor)
        //Hämtar token från localstorage
        var token = await localStorage.GetItemAsync<string>("Token");
        token = token.Replace("\"", "");
        //kollar att user finns i databas med token
        var result = await UserManager.CheckUserLogin(token);
        UserStatus = result;
        //hämtar den aktiva användaren
        ActiveUser = await UserManager.GetUserByToken(token);

        AllMessages = await DataManager.GetAllMessages(ThreadId);
    }

    private async void CreateMessage()
    {
        // Sätter vem som skapade meddelandet
        MessageToAdd.User = ActiveUser;

        // Hämtar alla interessen & trådar
        AllInterests = await DataManager.GetAllInterests();
        ActiveInterest = AllInterests.FirstOrDefault(ai => ai.Id == InterestId); // FAKE ID för tillfället

        AllThreads = await DataManager.GetAllThreads(InterestId);
        ActiveThread = AllThreads.FirstOrDefault(at => at.InterestId == ThreadId); // FAKE ID för tillfället

        MessageToAdd.Thread = ActiveThread;
        await DataManager.CreateMessage(MessageToAdd);
    }
}
