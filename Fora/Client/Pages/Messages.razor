@page "/messages/{Id:int}"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IUserManager UserManager
@inject IDataManager DataManager

<h3>Read what others feel about the subject!</h3>
@foreach (var mess in AllMessages)
{
    <div class="card-body">
        @if(mess.UserId == ActiveUser.Id)
        {
            <div class="alert alert-primary" role="alert">
                <h5>@mess.User.Username</h5><h6 style="float: right">@mess.Created</h6>
                @if(@mess.Message == "Message has been deleted")
                {
                    <em style="color: red">@mess.Message</em>
                }
                else
                {
                    <p>@mess.Message</p>
                }                
                @if(mess.Message != "Message has been deleted")
                {
                    <button style="float: right" class="btn btn-danger" @onclick="() => DeleteMessage(mess.Id)">Delete</button>
                }
            </div>
        }
        else
        {
            <div class="alert alert-success" role="alert">    
                <h5>@mess.User.Username</h5><h6 style="float: right">@mess.Created</h6>  
                <p>@mess.Message</p>
            </div>
        }
    </div>
}
<br />

<EditForm Model="MessageToAdd" OnSubmit="CreateMessage">
        <label>Have something to say about the subject? Let us hear!</label><br />
        <InputText @bind-Value="MessageToAdd.Message" placeholder="Write something..."></InputText>
        <button class="btn btn-outline-success">Post message</button>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    public List<MessageModel> AllMessages { get; set; } = new();
    public List<ThreadModel> AllThreads { get; set; } = new();
    public List<InterestModel> AllInterests { get; set; } = new();

    public MessageModel MessageToAdd { get; set; } = new();
    public UserStatusDTOModel UserStatus { get; set; } = new();
    public UserModel ActiveUser { get; set; } = new();
    List<InterestModel> ActiveUsersInterests = new();
    ThreadModel ActiveThread = new();

    protected override async Task OnInitializedAsync()
    {
        //*****CHECK USER LOGIN (att användas på alla sidor)
        //Hämtar token från localstorage
        var token = await localStorage.GetItemAsync<string>("Token");
        token = token.Replace("\"", "");
        //kollar att user finns i databas med token
        var result = await UserManager.CheckUserLogin(token);
        UserStatus = result;
        //hämtar den aktiva användaren
        ActiveUser = await UserManager.GetUserByToken(token);

        AllMessages = await DataManager.GetAllMessages(Id);
    }

    private async void CreateMessage()
    {
        // Set the user that created the message
        MessageToAdd.User = ActiveUser;

        // Get all interests and threads
        AllInterests = await DataManager.GetAllInterests();
        ActiveUsersInterests = AllInterests.Where(i => i.UserId == ActiveUser.Id).ToList(); 


        ActiveThread = await DataManager.GetThreadById(Id);

        MessageToAdd.User.Interests = ActiveUsersInterests;

        MessageToAdd.Thread = ActiveThread;
        await DataManager.CreateMessage(MessageToAdd);

        MessageToAdd = new();
        // Re-renders the page with all messages
        AllMessages = await DataManager.GetAllMessages(Id);
        StateHasChanged();
    }

    private async Task DeleteMessage(int messageID)
    {
        await DataManager.DeleteMessage(messageID);
        AllMessages = await DataManager.GetAllMessages(Id);
    }
}
